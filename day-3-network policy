###network policy will be always namespace specific
   288  kubectl run frontend --image=nginx
  289  kubectl run backend --image=nginx
  290  kubectl expose pod frontend --port 80
  291  kubectl expose pod backend --port 80
  292  kubectl exec frontend -- curl backend
  293  kubectl exec backend -- curl frontend
####the above mentioned example will create two pod and this two pod will by default communicate with each other. 
vi deny.yml
######deny policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-network-policy
  namespace: default
spec:
  podSelector: {}
   
  policyTypes:
    - Ingress
    - Egress
  ####save this file and apply it
kubectl apply -f deny.yml
kubectl get networkpolicy
#####after applying test the connection between the pod
292  kubectl exec frontend -- curl backend
  293  kubectl exec backend -- curl frontend

###next we will create a rule egresss rule which can intiate traffic to the backend but how it is going to select the backend
vi frontend-policy.yml
#######################
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      run: frontend 
  policyTypes:
    
    - Egress
  egress:
    - to:
        
        - podSelector:
            matchLabels:
              run: backend
####apply the policy
kubectl apply -f frontend-policy.yml
######now if i think i can intiate connection to the backend
292  kubectl exec frontend -- curl backend
kubectl get pod -o wide
##if naming convention not working check with the ip address of the pod
292  kubectl exec frontend -- curl 192.168.1.2
###backend should accept the connection we need to create an ingress routing for the backend
vi backend-policy.yml
#######################
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      run: backend
  policyTypes:
    
    - Ingress
  ingress:
    - from:
        
        - podSelector:
            matchLabels:
              run: frontend
####apply the policy
kubectl apply -f backend-policy.yml
######now if i think i can intiate connection to the backend
292  kubectl exec frontend -- curl backend
kubectl get pod -o wide
##if naming convention not working check with the ip address of the pod
292  kubectl exec frontend -- curl 192.168.1.2(ip of the backendpod)
###backend to frontend it will not work
292  kubectl exec backend -- curl 192.168.1.3(the ip of frontend pod)

###lets update the deny policy
vi deny.yml
######deny policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny
  namespace: default
spec:
  podSelector: {}
  policyTypes:
  - Egress
  - Ingress
  egress:
  - ports:
    - port: 53
      protocol: TCP
    - port: 53
      protocol: UDP

####apply this policy
kubectl apply -f deny.yml
292  kubectl exec frontend -- curl backend
